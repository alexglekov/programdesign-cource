code: |
  lst = [2,4]

  print(lst * 2 / 2)
output: "TypeError: unsupported operand type(s) for /: 'list' and 'int'"
tag:
  - list/operation

---

code: |
  num = 32 // 3
  phrase = 'Hello' if num == 10 else 'World'

  print('-'.join(phrase[::-1]))
output: "o-l-l-e-H"
tag:
  - list/operation/slice
  - string/operation/join

---

code: |
  lst_1 = [1, 2, 3, 4, 5]
  lst_2 = lst_1[:2]
  lst_1[2:] = lst_2[:]

  print(lst_1, end=" ")
  print(lst_2)
output: "[1, 2, 1, 2] [1, 2]"
tag:
  - list/operation/slice

---

code: |
  x1 = [i for i in range(10) if i % 2 and i % 3]
  x2 = x1
  x2.append(e for e in range(8) if e not in x1)

  print(x1)
output: "[1, 5, 7, <generator object <genexpr> at 0x7f18ad923f40>]"
tag:
  - list/comprehension
  - build-in/append
  - build-in/range
  - generator

---

code: |
  x1 = [17, 33, 15, 6, 1, 14]
  x2 = []
  while (el := x1.pop()) >= 15:
    x2.append(el)

  print(x2)
output: "[14, 1, 6, 15]"
tag:
  - list/operation/pop

---

code: |
  lst = ["ab", "vm"]
  for x in lst:
    lst.append(x.upper())

  print(lst)
output: "Infinite loop."
tag:
  - list/operation/append
  - string/operation/upper

---

code: |
  lst1 = [2, 5, 8, 0, 4, 1]
  lst2 = lst1

  print(lst1 is lst2, lst1 == lst2)
output: "True True"
tag:
  - list
  - expression/operation/is
  - expression/operation/equality

---

code: |
  lst1 = [2, 5, 8, 0, 4, 1]
  lst2 = lst1[:]

  print(lst1 is lst2, lst1 == lst2)
output: "False True"
tag:
  - list/operation/slice
  - expression/operation/is
  - expression/operation/equality

---

code: |
  lst1 = [2, 5, 8, 0, 4, 1]
  lst2 = lst1.copy()

  print(lst1 is lst2, lst1 == lst2)
output: "False True"
tag:
  - list/operation/copy
  - expression/operation/is
  - expression/operation/equality

---

code: |
  furniture_1 = ["TV", "Projector", "Playstation"]
  furniture_2 = ["Fridge", "Cooker", "Toster"]

  furniture_1.extend(furniture_2)
  furniture_2.append(furniture_1)

  print(furniture_2)
output: "['Fridge', 'Cooker', 'Toster', ['TV', 'Projector', 'Playstation', 'Fridge', 'Cooker', 'Toster']]"
tag:
  - list/operation/extend
  - list/operation/append

---

code: |
  furniture = ['TV', 'Projector', 'Playstation', 'Fridge', 'Cooker', 'Toster']
  furniture.reverse()

  print(*furniture[::-1])
output: "'TV' 'Projector' 'Playstation' 'Fridge' 'Cooker' 'Toster'"
tag:
  - list/operation/reverse
  - list/operation/slice

---

code: |
  row_data = ["False", 1076, [], True, 13 - 5, ("Vancouver", "Helsinki", "Montreal"), "trust", {56.22, "12"}]
  row_data.sort(reverse=True)

  print(row_data)
output: "TypeError: '<' not supported between 'int' and 'str'"
tag:
  - list/operation/sort

---

code: |
  lst = [15 + 6, 24 // 3, True == False, 12 - 3 - 3, 7 + 5 // 4]
  lst.sort(key=lambda x: x > 10)

  print(set(lst))
output: "{8, False, 21, 6}"
tag:
  - list/operation/sort
  - build-in/set

---

code: |
  lst = ["Jake", "Mike", "Brien", "Tim", "George", "Heisenberg"]
  lst.sort(key=lambda x: len(x), reverse=True)

  print(lst)
output: "['Heisenberg', 'Brien', 'George', 'Jake', 'Mike', 'Tim']"
tag:
  - list/operation/sort

---

code: |
  lst = [(25, 48, 254), {17, 32, 54.54}, [125, 91], [4.03], (77.78,), {.0299}, {41.7, 33, 49, 55}]
  lst.sort(key=lambda x: max(x))

  print(lst)
output: "[{0.0299}, [4.03], {32, 17, 54.54}, {41.7, 33, 55, 49}, (77.78,), [125, 91], (25, 48, 254)]"
tag:
  - list/operation/sort

---

code: |
  a = ["Jake", "Mike", "Brien", "Tim", "George", "Heisenberg"]
  a.insert("Kenny", 14)

  print(a)
output: "TypeError: 'str' object cannot be interpreted as an integer"
tag:
  - list/operation/insert

---

code: |
  a = ["Jake", "Mike", "Brien", "Heisenberg"]
  a.insert(14, "Kenny")

  print(a)
output: "['Jake', 'Mike', 'Brien', 'Heisenberg', 'Kenny']"
tag:
  - list/operation/insert

---

code: |
  a = 1.2
  b = a - 0.2
  lst = [1.2, 0.2]

  print(a, lst[b])
output: "TypeError: list indices must be integers or slices, not float"
tag:
  - list/literal

---

code: |
  a = [1]
  a.insert(4, 3)

  print(a)
output: "[1, 3]"
tag:
  - list/operation/insert

---

code: |
  a = list(range(6))
  a[2:10] = []

  print(a)
output: "[0, 1]"
tag:
  - list/operation/slice

---

code: |
  a = sorted([1, 4, 6, 10])
  b = [1, 4, 6, 10].sort()

  print(a == b)
output: "False"
tag:
  - list/operation/compare

---

code: |
  a = (0)
  b = [0], [[0]], {0}, [(0)]

  for i in b:
    print(a in i)
output: "True False True True"
tag:
  - list/operation/in

---

code: |
  obj1 = { "1": 1 }
  obj2 = { "2": 1 }
  obj3 = { "1": 1 }
  values = [obj1, obj2, obj3]

  print(values.count(obj1))
output: "2"
tag:
  - list/operation/count
  - dict/equal

---

code: |
  k = [7, 15, 13, 9, 1, 6, 13, 10, 2, 1, 0, 0.1, 4]

  print(k.count(13 | 4))
output: "2"
tag:
  - list/operation/count

---

code: |
  lst = ['123', '321', '000']

  print(lst.pop(2), *lst)
output: "000 123 321"
tag:
  - list/operation/pop

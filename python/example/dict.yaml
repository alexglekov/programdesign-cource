code: |
  i = {}

  print(type(i))
output: "<class 'dict'>"
tag:
  - dict/literal
  - type

---

code: |
  lst = [[1, 2], [2, 2, 3], [4, 2, 1, 1], [1, 2]]
  counts = dict()

  for el in lst:
  counts[tuple(el)] = el

  print(len(counts))
output: "3"
tag:
  - dict/operation/set

---

code: |
  nums = {
    1: {1},
    2: {2},
    3: {3}
  }

  print(list(nums.values()))
output: "[{1}, {2}, {3}]"
tag:
  - dict/operation/values

---

code: |
  template = { "i": 0 }
  values = []

  for i in range(5):
    if i > 2:
    template["i"] = i
    values.append(template)

  print(values)
output: "[{'i': 4}, {'i': 4}]"
tag:
  - dict/lvalue

---

code: |
  d = {
    -1: "some"
  }

  print(d[-1])
output: "some"
tag:
  - dict/indexing

---

code: |
  d = {
    "fruits": 3,
    "vegetables": 5,
    "cherries": 2
  }
  p = d.keys()[:]
  print(p)
output: "TypeError: 'dict_keys' object is not subscriptable"
tag:
  - dict/operation/keys

---

code: |
  element_dict = {1: 4, "value": 20, "key": 1, 18: .9}
  if any(element_dict):
    print(element_dict.keys())
output: "dict_keys([1, 'value', 'key', 18])"
tag:
  - dict/operation/keys
  - build-in/any

---

code: |
  d = {
    [1,2]: [3,4],
    (1): [1, 2]
  }
  print(d.items())
output: "TypeError: unhashable type: 'list'"
tag:
  - dict

---

code: |
  dict1 = {
    0: "False",
    True: "1"
  }

  print(dict1[1], dict1[False])
output: "1 False"
tag:
  - dict/indexing

---

code: |
  text = '1,2,3'
  d = dict.fromkeys(text)

  print(len(d))
output: "4"
tag:
  - dict/operation/fromkeys

---

code: |
  car = {
    "brand": "Ford",
    "model": "Mustang",
    "year": 1964
  }

  car.clear()

  print(car)
output: "{}"
tag:
  - dict/operation/clear

---

code: |
  car = {
    "brand": "Ford",
    "model": "Mustang",
    "year": 1964
  }

  x = car.copy()

  print(x) 
output: "{'brand': 'Ford', 'model': 'Mustang', 'year': 1964}"
tag:
  - dict/operation/copy

---

code: |
  x = ('key1', 'key2', 'key3')
  y = 0

  value = dict.fromkeys(x, y)

  print(value) 
output: "{'key1': 0, 'key2': 0, 'key3': 0}"
tag:
  - dict/operation/fromkeys

---

code: |
  class A:
    def __init__(self, i):
    self.i = i

  x = [A(1), A(2), A(3)]
  y = 0

  value = dict.fromkeys(x, y)

  print(value)
output: "{<__main__.A object at ref>: 0, <__main__.A object at ref>: 0, <__main__.A object at ref>: 0}"
tag:
  - dict/operation/fromkeys

---

code: |
  x = [1, 2, 3]
  y = [2, 3, 5]

  value = dict.fromkeys(x, y)

  print(value)
output: "{1: [2, 3, 5], 2: [2, 3, 5], 3: [2, 3, 5]}"
tag:
  - dict/operation/fromkeys

---

code: |
  x = [ { "i": 1 }, { "i": 3 }, { "i": 2 } ]
  y = 1

  value = dict.fromkeys(x, y)

  print(value)
output: "TypeError: unhashable type: 'dict'"
tag:
  - dict/operation/fromkeys

---

code: |
  x = { 1, 2, 3 }

  value = dict.fromkeys(x)

  print(value)
output: "{1: None, 2: None, 3: None}"
tag:
  - dict/operation/fromkeys

---

code: |
  car = {
    "brand": "Ford",
    "model": "Mustang",
    "year": 1964
  }

  x = car.get("model")

  print(x)
output: "Mustang"
tag:
  - dict/operation/get

---

code: |
  car = {
    "brand": "Ford",
    "model": "Mustang",
    "year": 1964
  }

  x = car.get("price", 15000)

  print(x)
output: "15000"
tag:
  - dict/operation/get

---

code: |
  car = {
    "brand": "Ford",
    "model": "Mustang",
    "year": 1964
  }

  x = car.get("price")

  print(x)
output: "None"
tag:
  - dict/operation/get

---

code: |
  car = {
    "brand": "Ford",
    "model": "Mustang",
  }

  x = car.items()

  print(x)
output: "dict_items([('brand', 'Ford'), ('model', 'Mustang')])"
tag:
  - dict/operation/items

---

code: |
  elements = {1: 2, 2: 3, 3: 4}
  elements[2] += 6

  print(elements.items())
output: "dict_items([(1, 2), (2, 9), (3, 4)])"
tag:
  - dict/operation/item
  - dict/indexing

---

code: |
  x = {1: 'a', 2: 'b'}
  y = {2: 'c', 3: 'd'}

  print({**x, **y}[2])
output: "c"
tag:
  - dict/indexing
  - dict/var-keyword

---

code: |
  elements = [1, 2, 3]
  res_elements = dict.fromkeys(elements, elements ** 2)

  print(res_elements)
output: "TypeError: unsupported operand type(s) for ** or pow(): 'list' and 'int'"
tag:
  - dict/operation/fromkeys 

---

code: |
  car = {
    "brand": "Ford",
    "model": "Mustang",
    "year": 1964
  }

  x = car.items()

  car["year"] = 2018

  print(x)
output: "dict_items([('brand', 'Ford'), ('model', 'Mustang'), ('year', 2018)])"
tag:
  - dict/operation/items

---

code: |
  car = {
    "brand": "Ford",
    "model": "Mustang",
    "year": 1964
  }

  x = car.keys()

  print(x)
output: "dict_keys(['brand', 'model', 'year'])"
tag:
  - dict/operation/keys

---

code: |
  car = {
    "brand": "Ford",
    "model": "Mustang",
    "year": 1964
  }

  x = car.keys()

  car["color"] = "white"

  print(x)
output: "dict_keys(['brand', 'model', 'year', 'color'])"
tag:
  - dict/operation/keys

---

code: |
  car = {
    "brand": "Ford",
    "model": "Mustang",
    "year": 1964
  }

  car.pop("model")

  print(car)
output: "{'brand': 'Ford', 'year': 1964}"
tag:
  - dict/operation/pop

---

code: |
  car = {
    "brand": "Ford",
    "model": "Mustang",
    "year": 1964
  }

  x = car.pop("price")

  print(x)
output: "KeyError: 'price'"
tag:
  - dict/operation/pop

---

code: |
  car = {
    "brand": "Ford",
    "year": 1964
  }

  x = car.pop("model", 'Rover')

  print(x)
output: "Rover"
tag:
  - dict/operation/pop

---

code: |
  car = {
    "brand": "Ford",
    "model": "Mustang",
    "year": 1964
  }

  x = car.popitem()

  print(x)
output: "('year', 1964)"
tag:
  - dict/operation/popitem

---

code: |
  car = {
    "brand": "Ford",
    "model": "Mustang",
    "year": 1964
  }

  x = car.setdefault("model", "Bronco")

  print(x)
output: "Mustang"
tag:
  - dict/operation/setdefault

---

code: |
  car = {
    "brand": "Ford",
    "model": "Mustang",
    "year": 1964
  }

  x = car.setdefault("color", "white")

  print(x)
output: "white"
tag:
  - dict/operation/setdefault

---

code: |
  car = {
    "brand": "Ford",
    "model": "Mustang",
    "year": 1964
  }

  x = car.setdefault("price")

  print(x)
output: "None"
tag:
  - dict/operation/setdefault

---

code: |
  car = {
    "brand": "Ford",
    "model": "Mustang",
    "year": 1964
  }

  car.update({"color": "White"})

  print(car)
output: "{'brand': 'Ford', 'model': 'Mustang', 'year': 1964, 'color': 'White'}"
tag:
  - dict/operation/update
